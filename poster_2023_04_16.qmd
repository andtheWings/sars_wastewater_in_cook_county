# For Abstract

https://docs.google.com/document/d/1u_Oxw4y3NwPutmZ9QNjpNUWXRIQYCi8rEqQchDtUKhA/edit?usp=sharing

# For Poster

## Intro

Cook County Department of Public Health (CCDPH) serves the health of ~2.5 million Suburban Cook County (SCC) residents. By demographics, these constituents have a median age of 41 years old; are 48% male; and identify as 52% Non-Hispanic White, 17% Non-Hispanic Black, 9% Asian, and 22% Hispanic [@AmericanCommunitySurvey]. 
Kelley Bemis (KB) works within the Communicable Disease Prevention and Control Unit (CD) of CCDPH, which "works to prevent and control the spread of communicable diseases [in SCC]." During the COVID-19 Pandemic, the CD began trending the quantity of SARS-CoV-2 viral particles generated by resident fecal matter in local wastewater over time. KB tasked Daniel Hall Riggins (DHR) with extending her work to incorporate wastewater data into an early warning system for local surges of COVID-19.

## Methods

### Overview

KB and DHR used descriptive time-series analysis from February through December 2022 to design the wastewater component of an early warning system. 
These methods were informed by standards established by the National Wastewater Surveillance System (NWSS). 
Data was gathered from NWSS for samples collected at the seven wastewater reclamation plants serving SCC. 
Because aggregate fecal matter was measured at these public utilities, no active participation was required by county residents, there were no inclusion/exclusion criteria, and demographics of the sample population roughly matched those of the county as a whole. 
Cultural/social/linguistic factors did not influence implementation at this stage as metrics were intended largely for communication within CCDPH (see further comments in Discussion). 

### Analytic Sequence

The primary metric was number of copies of SARS-CoV-2 viral particles in wastewater at sequential time points. 
DHR totaled viral copies across also all seven reclamation plants at each time point to create an aggregate metric for the whole county.
For each time point, a spline function was fit to the time series, the spline's slope was measured at the leading edge, and the slope was standardized to "percent daily change" (PDC).
The trend in PDC was compared to the clinical trend of the number of inpatient admissions for COVID-like illness.
DHR experimented with using different thresholds of PDC for triggering warning of impending clinical surge.
He also experimented with applying the same analytic sequence to emergency department (ED) trends then combining the ED output with that of wastewater to see if the combination offered more robust warning.

## Results

DHR gained many competencies by participation in this project.
First, he expanded skills in the realm of time-series quantitative analysis by gaining practical experience with R packages like {timetk} and {zoo} (Foundational Competency #3). 
Second, he improved data cleaning proficiency by specifying a data pipeline using the {targets} package (Generalist Competency #10).
Third, he learned about visualizing time series trends and periods using extensions of the {ggplot2} package (GC #17).
Fourth, he refined his written and oral communication skills by producing two internal reports, two project update presentations, and one journal club (FC #19). 
The reports and project updates acted as snapshots of the methods and findings DHR had developed.
The journal club was based on recent research exploring novel use-cases for wastewater analysis that the local health department might consider exploring.
Finally, he learned more about effective participation on interprofessional teams by integrating his code with KB's using the collaboration platform Github (FC #21).

## Discussion

### Summary Findings

DHR was unable to establish a reliable threshold using wastewater trends alone to trigger warnings of COVID-19 surges.
However, he found that combining wastewater and ED trends created subjectively more sensitive and specific warnings those created by either trend alone.
He proposed a threshold of +1.5 PDC in either metric at any given time point as the best trigger for a warning.
Regardless of the thresholds used, DHR recommended contextualizing warnings with visualizations of the raw trends given that the correlation between wastewater and clinical metrics is dynamically shifting over time.

### Implications

By improving warnings for impending clinical surges of COVID-19, this work will help CCDPH remain better prepared and allocate its resources more efficiently.
Because the analytic sequence has been specified in a data pipeline, it can be adapted to new scenarios and generate findings in rapid fashion.
Furthermore, the data can be disaggregated down to individual wastewater reclamation plants or even local manholes to get more granular trends.
From an equity perspective, inclusion of wastewater trends helps mitigate biases created by using clinical tests or syndromic surveillance alone.
Such biases stem from the requirement that infected individuals have access to healthcare and the trust in local institutions needed to actually seek it.
In contrast, wastewater trends represent all people in the catchment region of a public water utility and may help find signals that might be lost using clinical trends alone.

## Prep

```{r}
#| output: false
library(targets)
library(tidyverse)
library(lubridate)
library(timetk)
library(plotly)
sapply(
    paste0("R/", list.files("R/")),
    source
)
```

Here I load my data. I have created a series of upstream data wrangling steps that culminate in a list containing separate dataframes for each WWTP and one for the aggregation of all plants.

```{r}
load("data/2023-01-27_hosp-metrics.Rdata")
tar_make()
tar_load(nwss)
```

```{r}
source("R/add_spline_snapshots.R")
cli_2022_and_full_spline <- 
    cli |> 
    filter(date >= ymd("2022-02-15") & date < ymd("2023-01-01")) |> 
    add_spline_and_slope("cli") |>
    mutate(
        z_cli = (cli - mean(cli))/sd(cli)
    ) |> 
    add_spline_snapshots("cli")
    # select(
    #     date,
    #     percent_ed_visits_for_covid = cli,
    #     .ed_spline = .spline,
    #     .cli_z_spline = .z_spline,
    #     .cli_spline_slope = .spline_slope,
    #     .cli_percent_daily_change = .percent_daily_change 
    # )

cook_agg_and_full_spline <- 
    nwss$cook_aggregate |> 
    filter(date >= ymd("2022-02-15") & date < ymd("2022-04-16")) |> 
    add_spline_and_slope("conc_flowrt_sum") |> 
    add_spline_snapshots("conc_flowrt_sum")
    # select(
    #     date,
    #     summed_viral_copies_per_day = conc_flowrt_sum,
    #     .wastewater_spline = .spline,
    #     .nwss_z_spline = .z_spline,
    #     .nwss_spline_slope = .spline_slope,
    #     .nwss_percent_daily_change = .percent_daily_change 
    # )


admits_full_spline <-
    cli |>
        filter(date >= ymd("2022-02-15") & date < ymd("2023-01-01")) |> 
        select(date, admits) |> 
        add_spline_and_slope("admits") 
```


```{r}

text <- tibble(
    x = lubridate::ymd("2022-04-06"),
    y = 5.45,
    label = "Warning Period"
)
    

rectangle <-
    tibble(
        ymin = 5.2,
        ymax = 5.7,
        xmin = lubridate::ymd("2022-03-06"),
        xmax = lubridate::ymd("2022-05-08")
    )

over_threshold <-
    nwss$cook_aggregate |> 
    filter(date >= ymd("2022-02-15") & date < ymd("2022-06-01")) |> 
    add_spline_and_slope("conc_flowrt_sum") |> 
    filter(.percent_daily_change > 1.5)

# plotly::ggplotly(
    nwss$cook_aggregate |> 
    filter(date >= ymd("2022-02-15") & date < ymd("2022-06-01")) |> 
    add_spline_and_slope("conc_flowrt_sum") |> 
    add_spline_snapshots("conc_flowrt_sum") |>  
    ggplot() +
    # geom_point(
    #     aes(x = date, y = conc_flowrt_sum),
    #     color = "#CA7C1B",
    #     # alpha = 0.5
    # ) +
    geom_line(
        aes(x = date, y = .spline),
        color = "#CA7C1B",
    ) +
    geom_point(
        aes(x = date, y = .percent_daily_change),
        color = "red",
        data = over_threshold
    ) +
    geom_rect(
        aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
        fill = "red",
        data = rectangle
    ) +
    geom_hline(
        yintercept = 1.5,
        linetype = "dashed",
        color = "red"
    ) +
    geom_label(
        aes(x = x, y = y, label = label),
        data = text
    ) +
    labs(
        x = NULL,
        y = "Viral Particles / Day"
    ) +
    theme_bw()
# )
```


```{r}
test_thresholds <- 
    read_csv("data/test_thresholds.csv") |> 
    mutate(
        threshold_factor = 
            factor(
                threshold,
                levels = c("Alarm 1.0%", "Ground Truth 1.0%", "Alarm 1.5%", "Ground Truth 1.5%", "Alarm 2.0%", "Ground Truth 2.0%"),
                ordered = TRUE
            )
    )
    
    
test_inputs <- 
    read_csv("data/test_inputs.csv") |> 
    mutate(
        input_factor = 
            factor(
                input,
                levels = c("ED and Wastewater", "Just ED", "Just Wastewater", "Admits Ground Truth"),
                ordered = TRUE
            )
    ) |> 
    filter(input != "Admits Ground Truth")
```

```{r}
main_fig <-
    ggplot() +
        geom_point(
            aes(x = date, y = admits),
            color = "#0D2D6C",
            alpha = 0.25,
            data = admits_full_spline
        ) +
        geom_line(
            aes(x = date, y = .spline),
            color = "#0D2D6C",
            data = admits_full_spline
        ) +
        geom_rect(
            aes(
                xmin = date_min,
                xmax = date_max,
                ymin = y_min,
                ymax = y_max,
                fill = input_factor
            ),
            data = test_inputs
        ) +
        scale_fill_manual(
            values = c("#D85820", "#007FA4", "#CA7C1B")
        ) +
        # scale_fill_brewer(palette = "Dark2") +
        # geom_point(
        #     aes(x = date, y = conc_flowrt_sum),
        #     color = "red",
        #     alpha = 0.25,
        #     data = cook_agg_and_full_spline
        # ) +
        # geom_line(
        #     aes(x = date, y = .pdc_snapshot),
        #     color = "red",
        #     data = cook_agg_and_full_spline
        # ) +
        labs(
            x = NULL,
            y = NULL,
            title = NULL, 
            #"Inpatient Admissions for Covid-like Illness \n Overlaid with Warnings from Different Inputs",
            fill = "Alarm Input"
        ) +
        # coord_cartesian(ylim = c(-6,6)) +
        theme_minimal(
        ) +
        theme(
            #plot.title = element_text(size = 40),
            axis.text = element_text(size = 20),
            legend.position="none"
        )

main_fig

ggsave("test.png", width = 14, height = 8, units = "in")
```


```{r}
cli_2022_and_full_spline |> 
    arrange(date) |> 
    select(date, .percent_daily_change) |> 
    view()
```

```{r}
admits_full_spline <-
    cli |> 
    add_spline_and_slope("admits") |> 
    filter(date >= ymd("2022-02-15") & date < ymd("2023-01-01")) |> 
    arrange(date)
```

